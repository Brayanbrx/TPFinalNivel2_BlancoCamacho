<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP7iyLD+5MzN/vPovP7z6bv+8+m7/vLovf3q2tD95dDiY8Hz+Ea7
        /P1Rwv/+VMH9/FW/+OdXv/bQUcD7kU/A/01OxP8NAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAdEAiRHY+IJl2PiCZ++DF/fzhyP3+8+n//vPp//7z6f/+8+n//vPp//7z
        6f9Bu/3/Orr//0/B//9Pwf//T8H//0/B//9Pwf//T8H//1TA+/dYvveWUL//IAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2Ph97dj4g/3Y+IP/63sT/++DG//7z6f/+8+n//vPp//7z
        6f/+8+n//vPp/0G7/f86uv//T8H//0/B//9Pwf//T8H//0/B//9Pwf//T8H//0/B//9Rwf39V8H2j1XV
        /wYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHY+H3t2PiD/dj4g//rexP/74Mb//vPp//7z
        6f/+8+n//vPp//7z6f/+8+n/Qbv9/zq6//9Pwf//T8H//0/B//9Pwf//T8H//0/B//9Pwf//T8H//0/B
        //9Pwf//Wr7z3U/B/x0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdj4fe3Y+IP9xTyr/csuC/4LP
        jf+N153/jded/6Tdrf/98+j//vPp//7z6f9Bu/3/Orr//0/B//9Pwf//T8H//0/B//9Pwf//T8H//0/B
        //9Pwf//T8H//0/B//9Pwf//V7738U/B/y0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2Ph97dj4g/2N6
        Qv9Oxm//itmg/3DRjP9kzYL/ZM2C/+Xt2f/+8+n//vPp/0G7/f86uv//T8H//0/B//9Pwf//T8H//03A
        //9OwP//TcD//0/B//9NwP//T8H//0y///9Pwf//VsD48lK//xwAAAAAAAAAAAAAAAAAAAAAAAAAAHlB
        IH52PiD/YnxD/4vaof/w+vP/4/bo/3HRjP9kzYL/4+zX//7z6f/+8+n/Qbv9/zq6//9Pwf//T8H//0/B
        //9Pwf//LK35/yOp+P8JmvP/Kav5/waY8/8nq/j/Iqj4/0/B//9Pwf//W7/z10m2/wcAAAAAAAAAAAAA
        AAAAAAAApWEyvXY+IP9ifEP/ld2q/3bTkf+m4rf/4/bo/3HRjP/j7Nf//vPp//7z6f9Bu/3/Orr//0/B
        //9Pwf//T8H//0/B//8srfn/AJXy/wCV8v8AlfL/AJXy/wCV8v8iqPj/T8H//0/B//9Pwf//V8D4igAA
        AAAAAAAAAAAAAPenWCC5cjv8dj4g/2J8Q/9OxnD/ZM2C/2TNgv+i4bT/ld2q/+Ps1//+8+n//vPp/0G7
        /f86uv//T8H//0/B//9Pwf//T8H//yyt+f8AlfL/AJXy/wCV8v8AlfL/AJXy/yKo+P9Pwf//T8H//0/B
        //9SwPz7TcT/HgAAAAAAAAAA+qVVkLpzO/92PiD/bFow/1jIdf9ozYL/bs+J/27Pif+F1Zf/+fHm//7z
        6f/+8+n/Qbv9/zq6//9Pwf//T8H//0/B//9Pwf//LK35/wCV8v8AlfL/AJXy/wCV8v8AlfL/Iqj4/0/B
        //9Pwf//T8H//0/B//9WwPmdAAAAAP+kWw75pFXzunM7/3Y+IP92PiD/+t7E//vgxv/+8+n//vPp//7z
        6f/+8+n//vPp//7z6f9Bu/3/Orr//0/B//9Pwf//T8H//0/B//8srfn/AJXy/wCV8v8AlfL/AJXy/wCV
        8v8iqPj/T8H//0/B//9Pwf//T8H//1TA+/dVxv8J+KNVTvmkVf+6dUD/dj4g/3Y/IP/N2K7/wtis/9Xp
        zv/V6c7/6e7b//7z6f/+8+n//vPp/2fG+f9Gvf7/Zsf8/2bH/P9mx/z/Zsf8/0649v8gofH/IKHx/yCh
        8f8gofH/HaDy/z2x9v9mx/z/Wrfq/1Sv4f9ctuX/Y73q/Hu50lv6pFaS+aRV/7p5Rf92PiD/Zm48/03G
        b/9jzYH/ZM2C/2TNgv9mzoT/8O/g//7z6f+rjHn/9ujf//7z6f/+8+n//vPp//7z6f/+8+n//vPp//7z
        6f/+8+n//vPp//7z6f/+8+n//vPp//7z6f+kemP/dj4g/7JxQf/5pFX/+qRUlPmkVcj5pFX/untK/3Y+
        IP9ifEP/Wsp6/9vz4v+n47j/ZM2C/2TNgv/j7Nf//e3d/4hbQf9lNh7/wZZ4//fWuv/93L3//dy9//3c
        vf/93L3//dy9//3cvf/95s///vPp//7z6f/+8+n//vPp/6R6Y/92PiD/snNG//mkVf/5pFXH+aRV3/mn
        Wv+6fEz/dj4g/2J8Q//E7M//sebA/+L25/+o47n/ZM2C/+Ps1//+8ub/6NC//3lEKP9nRXP/YF3x/9fI
        4P/96dj//enY//3p2P/96dj//enY//7v4P/+8+n//vPp//7z6f/+8+n/pHpj/3Y+IP+ydEf/+ada//mk
        VeX5pFX0+ald/7p8TP92PiD/YnxD/1HHc/9kzYL/cNGL/+L25/+W3av/4+zX//3s2//92LX/n3uK/0lH
        7/9gXfT/X134/9S4xv/917X//de1//3Xtf/917X//de1//3Xtf/92LT//e3e//7z6f+kemP/dj4g/7J0
        R//6qV//+aRV9vmkVfn5qmD/unxM/3Y+IP9lcz7/TcVv/2PMgf9kzYL/bNCI/3DRi//p7tv//vLo//7v
        4P/o2+P/XVvx/0VF9P9gX/j/X176/9XK5//+7+D//u/g//7v4P/+7+D//u/g//7v4P/+8uj//vPp/6R6
        Y/92PiD/snRH//mqYf/5pFX2+KRV6/mqYf+6fEz/dj4g/3RCIv+01KL/qtWg/8DkwP/A5MD/1unP//7z
        6f/+8+n//vPp//7z6f/p3+r/X13z/0VF9P9gX/j/X176/9XN7f/+8+n//vPp//7z6f/+8+n//vPp//7z
        6f/+8+n/pHpj/3Y+IP+ydEf/+aph//mkVeP5pFXK+ahd/7p8TP92PiD/dj4g//rexP/74Mb//vPp//7z
        6f/+8+n//vPp//7z6f/+8+n//vPp//7z6f/p3+r/X13z/0VF9P9gX/j/X176/9XN7f/+8+n//vPp//7z
        6f/+8+n//vPp//7z6f+kemP/dj4g/7J0R//6qV//+aRVyPilVpv5p1r/unxM/3Y+IP9vUyz/Z8p8/3nO
        if+D1Zf/g9WX/5rapv/88uj//vPp//7z6f/+8+n//vPp//7z6f/p3+r/X13z/0VF9P9gX/j/X176/9XN
        7f/+8+n//vPp//7z6f/+8+n//vPp/6R6Y/92PiD/snRH//mnW//6pFaS+aNWWfmkVf+6e0v/dj4g/2J6
        Q/9Pxm//k9yo/3TSj/9kzYL/ZM2C/+Tt2P/+8OT//ebP//3lz//95c///eXP//3lz//o09P/X1vv/0VF
        9P9gXvf/X175/9TI4//+8+n//vPp//7z6f/+8+n/pHpj/3Y+IP+xdEb/+aRV//mjVlb/pFsO+aRV9bp5
        Rf92PiD/YnxD/5Xdqf/s+e//5/fs/3XSkP9kzYL/4+zX//7u3//93sL//d7B//3ewf/93sH//d7B//3e
        wf/ozcf/X1rt/0VF9P9gXvb/X175/9XN7f/+8+n//vPp//7z6f+kemP/dj4g/7JwQf/5pFXx/5lNCgAA
        AAD5pFSdunVA/3Y+IP9ifEP/jNqi/3HRjf+d37D/6Pjs/3XSkP/j7Nf//u7h//3jyv/948r//ePK//3j
        yv/948r//ePK//3jyv/o0c//X1vv/0VF9P9gXvb/X175/9TB1v/+7+L//vPp/6R6Y/92PiD/sm48//ij
        VZkAAAAAAAAAAPihVya5cjr9dj4g/2J7Q/9OxnD/ZM2C/2TNgv+Z3q3/kdym/+Ps1//+7+L//ePK//3j
        yv/948r//ePK//3jyv/948r//ePK//3jyv/o0c//X1vv/0VF9P9gXvb/X175/9XL6v/+8+n/pHpj/3Y+
        IP+xbDj796VSHwAAAAAAAAAAAAAAAKdlM8N2PiD/blcu/2HIef9vzob/edKQ/3nSkP+P2J//+PHl//7z
        6f/+8+n//vPp//7z6f/+8+n//vPp//7z6f/+8+n//vPp//7z6f/p3+r/X13z/0VF9P9gX/j/X176/9XN
        7f+kemP/dj4g/6JgMrIAAAAAAAAAAAAAAAAAAAAAekIif3Y+IP92PiD/+t7E//vgxv/+8+n//vPp//7z
        6f/+8+n//vPp//7z6f/+8+n//vPp//7z6f/+8+n//vPp//7z6f/+8+n//vPp//7z6f/p3+r/X13z/0VF
        9P9gX/j/X176/5FxiP+CRiTogEAgCAAAAAAAAAAAAAAAAAAAAAB2Ph97dj4g/3Y+IP/63sT/++DG//7z
        6f/+8+n//vPp//7z6f/+8+n/7NvO/4taP/+IVjv/iFY7/4hWO/+IVjv/iVc8/9/Ku//+8+n//vPp//7z
        6f/p3+r/X13z/0VF9P9gX/j/W1n1/2FTt1kAAAAAAAAAAAAAAAAAAAAAAAAAAHc9IVx2PyHMfEMj1vrf
        xP/74Mb//vPp//7z6f/+8+n//vPp//7z6f8ytv3/LbH8/07A//9Pwf//T8H//0/B//87tvz/T7/+/+zu
        6//+8+n//vPp//7z6f/p3+r/X13z/0VF9P9YV/j1WFj69lhY7EMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA+9/E2PzdwPv96tj//eva//3r2v/969r//eva/y21//8PnvX/Sb7+/0/B//9Pwf//TsD//xSg
        9f9Jvv7/5+bf//3r2v/969r//eva//3q2P/n2N72XFv0+kVF9P9WU+v+WFbz+1pa4zYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/6pVCfqkVoz5qF38+rJu//q2dv/6tnb/mbGw/1mLpP+Musn/qru2/6q7
        tv+qu7b/c4mS/56vrf/zt3v/+rZ2//qyb//5qF36+aNWgP+SSQdERPceSEXl7kVF9P9YT9b/c0E8u4Ar
        KwYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPihVyb5pFSd+apf+Pqvaf/5tXP/qGxA/6pt
        Qv/yr3H/9bFy/7h5Sv+ZXjf/+LNz//qvaf/5qV72+qRWkvijVSQAAAAAAAAAAAAAAABERPceTkTI2nE+
        NP92PiDhdDojFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/pFsO+aNWWfij
        V5zyoVfUr207+IVLJ/+ESSf+p2Y29u2gV9P6olaS+aVUUv+kWw4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAdz8fcng8HiIAAAAA+AAD/8AAAP/AAAA/wAAAH8AAAA/AAAAHwAAAA8AAAAOAAAABgAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABwAAAA8AA
        AAPAAAAHwAAAA/gAAAH8AAAA/wAA4P/AA/k=
</value>
  </data>
</root>